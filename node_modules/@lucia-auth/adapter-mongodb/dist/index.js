export class MongodbAdapter {
    Session;
    User;
    constructor(Session, User) {
        this.Session = Session;
        this.User = User;
    }
    async deleteSession(sessionId) {
        await this.Session.findOneAndDelete({ _id: sessionId });
    }
    async deleteUserSessions(userId) {
        await this.Session.deleteMany({ user_id: userId });
    }
    async getSessionAndUser(sessionId) {
        // await necessary for mongoose
        const cursor = await this.Session.aggregate([
            { $match: { _id: sessionId } },
            {
                $lookup: {
                    from: this.User.collectionName,
                    localField: "user_id",
                    // relies on _id being a String, not ObjectId.
                    foreignField: "_id",
                    as: "userDocs"
                }
            }
        ]);
        const sessionUsers = await cursor.toArray();
        const sessionUser = sessionUsers?.at(0) ?? null;
        if (!sessionUser)
            return [null, null];
        const { userDocs, ...sessionDoc } = sessionUser;
        const userDoc = userDocs?.at(0) ?? null;
        if (!userDoc)
            return [null, null];
        const session = transformIntoDatabaseSession(sessionDoc);
        const user = transformIntoDatabaseUser(userDoc);
        return [session, user];
    }
    async getUserSessions(userId) {
        const sessions = await this.Session.find({ user_id: userId }, {
            projection: {
                // MongoDB driver doesn't use the extra fields that Mongoose does
                // But, if the dev is passing in mongoose.connection, these fields will be there
                __v: 0,
                _doc: 0
            }
        }).toArray();
        return sessions.map((val) => transformIntoDatabaseSession(val));
    }
    async setSession(session) {
        const value = {
            _id: session.id,
            user_id: session.userId,
            expires_at: session.expiresAt,
            ...session.attributes
        };
        await this.Session.insertOne(value);
    }
    async updateSessionExpiration(sessionId, expiresAt) {
        await this.Session.findOneAndUpdate({ _id: sessionId }, { $set: { expires_at: expiresAt } });
    }
    async deleteExpiredSessions() {
        await this.Session.deleteMany({
            expires_at: {
                $lte: new Date()
            }
        });
    }
}
function transformIntoDatabaseUser(value) {
    delete value.__v;
    const { _id: id, ...attributes } = value;
    return {
        id,
        attributes
    };
}
function transformIntoDatabaseSession(value) {
    delete value.__v;
    const { _id: id, user_id: userId, expires_at: expiresAt, ...attributes } = value;
    return {
        id,
        userId,
        expiresAt,
        attributes
    };
}
